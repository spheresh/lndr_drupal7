<?php

/**
 * @file
 * Code for the Lndr module.
 */

define('LNDR_BASE', 'https://lndr.co/');
define('LNDR_BASE_PUBLISHED', 'https://lndr.co/p/');
define('LNDR_API_GET_PROJECT', 'https://www.lndr.co/v1/projects');
define('LNDR_API_VALIDATE_TOKEN', 'https://www.lndr.co/v1/validate_token');
define('LNDR_CT_TYPE', 'lndr_page');

/**
 * Implements hook_help().
 *
 * @param string $path
 * @param array|mixed $arg
 *
 * @return null|string
 */
function lndr_help($path, $arg = array()) {

  switch ($path) {
    case 'admin/config/content/lndr':
      return t('Please refer to the <a href="@lndr-help">Lndr help page</a> on how to use this module', array('@lndr-help' => base_path() . 'admin/help/lndr'));

    case 'admin/help#lndr':
      $output = '';
      $output .= '<h3>' . t('About Lndr') . '</h3>';
      $output .= '<p>' . t('This module allows you to publish Lndr landing pages to Drupal 8 websites, for more information, please go to <a href="@lndr-home">http://www.lndr.co</a>.', array('@lndr-home' => 'http://www.lndr.co')) . '</p>';
      $output .= '<h3>' . t('Before you start') . '</h3>';
      $output .= '<p>' . t('You will need a Lndr user account which you can obtain from http://www.lndr.co') . '</p>';
      $output .= '<h3>' . t('How to use the module') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Configuring the module') . '</dt>';
      $output .= '<dd>' . t('You can find the configuration page for Lndr under Administration > Configuration > Content authoring or <a href="@lndr">Lndr configuration page</a>.', array('@lndr' => base_path() . 'admin/config/content/lndr')) . '</dd>';
      $output .= '<dd>' . t('You can find the API token for Lndr under your <a href="@lndr-user">user profile in Lndr</a>.', array('@lndr-user' => 'https://www.lndr.co/users/edit')) . '</dd>';
      $output .= '<dt>' . t('Using the module') . '</dt>';
      $output .= '<dd>' . t('Generally, you do not need to actively use this module once it has been successfully configured. There might be some exceptions such as changing the API token.') . '</dd>';
      $output .= '<dd>' . t('If your landing page created for Drupal does not show up, you can always run the Drupal cron manually to trigger the page sync.') . '</dd>';
      $output .= '<dd>' . t('Your landing page created for Drupal can be found under the <a href="@url-alias">URL alias</a> section', array('@url-alias' => base_path() . 'admin/config/search/path')) . '</dd>';
      $output .= '<dd>' . t('Lndr pages in Drupal will appear in the URL alias as /lndr/[id]') . '</dd>';
      $output .= '</dl>';
      $output .= '<p>' . t('For more information, contact <a href="@lndr-support">support@lndr.co</a>', array('@lndr-support' => 'mailto:support@lndr.co')) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_init
 * Enable cross-domain request for the API path.
 */
function lndr_init() {
  // Only add the CORS header to our service path for security.
  $current_path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  $page_match = drupal_match_path($current_path, 'service/lndr/*');
  if ($current_path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], 'service/lndr/*');
  }
  if ($page_match) {
    // Let's add our CORS headers.
    $headers = array(
      'Access-Control-Allow-Origin' => 'https://lndr.co',
      'Access-Control-Allow-Credentials' => TRUE,
      'Access-Control-Allow-Methods' => 'GET, POST',
      'Access-Control-Allow-Headers' => 'Authorization',
    );
    foreach ($headers as $header => $value) {
      drupal_add_http_header($header, $value, TRUE);
    }
    if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
      drupal_exit();
    }
  }
}

/**
 * Implements hook_menu.
 */
function lndr_menu() {

  $items['admin/config/content/lndr'] = array(
    'title' => 'Lndr: Landing Page Builder',
    'description' => 'Manage configuration for lndr',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lndr_admin_settings'),
    'access arguments' => array('administer nodes'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'lndr.admin.inc',
  );

  // If source URLs are unavailable, source should be always be served through
  // the menu system.
  $directory_path = file_stream_wrapper_get_instance_by_scheme('public')->getDirectoryPath();
  $items[$directory_path . '/lndr/%lndr'] = array(
    'title' => 'Lndr source processor',
    'page callback' => 'lndr_source_file_deliver',
    'page arguments' => array(count(explode('/', $directory_path)) + 1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Drupal API to check URL availability.
  $items['service/lndr/validate_path'] = array(
    'title' => 'Check URI availability',
    'page callback' => 'lndr_validate_path',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Drupal API to reserve URL/path.
  $items['service/lndr/reserve_path'] = array(
    'title' => 'Check URI availability',
    'page callback' => 'lndr_reserve_path',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  // Drupal API to sync contents from Lndr.
  $items['service/lndr/sync_content'] = array(
    'title' => 'Sync Lndr pages',
    'page callback' => 'lndr_sync_content',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_load().
 */
function lndr_load($alias) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', LNDR_CT_TYPE)
    ->fieldCondition('lndr_project_id', 'value', $alias, '=');
  $result = $query->execute();
  if (isset($result['node'])) {
    return node_load(reset($result['node'])->nid);
  }
  else {
    return FALSE;
  }
}

/**
 * Menu callback function.
 *
 * @param $node
 *   Lndr node object.
 */
function lndr_source_file_deliver($node) {
  module_load_include('inc', 'lndr');
  $args = func_get_args();
  array_shift($args);
  $target = implode('/', $args);
  lndr_file_transfer($node, $target);
}

/**
 * Implements hook_menu_alter.
 *
 * @param $items
 */
function lndr_menu_alter(&$items) {
  // @todo: not the best approach, however, sufficient for a POC.
  $items['node/%node']['page callback'] = 'lndr_custom_node_view';
}

/**
 * Implements hook_form_FORM_ID_alter.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function lndr_form_node_admin_content_alter(&$form, &$form_state, $form_id) {
  $nodes = $form['admin']['nodes']['#options'];
  if (empty($nodes)) {
    return;
  }
  foreach ($nodes as $nid => $node) {
    if ($node['type'] == 'Lndr: Landing page') {
      $form['admin']['nodes']['#options'][$nid]['operations']['data']['#attributes']['class'][] = 'external';
    }
  }
}

/**
 * Hijacking the node view for custom rendering of Lndr landing page.
 *
 * @TODO it still doesn't look as better approach to override page callback.
 *
 * @param $node
 *   A stdClass node object.
 *
 * @return array
 *   Page delivery render array.
 */
function lndr_custom_node_view($node) {
  if ($node->type == LNDR_CT_TYPE) {
    module_load_include('inc', 'lndr');
    $lang = $node->language;
    $lndr_project_id = $node->lndr_project_id[$lang][0]['value'];
    if (!file_exists('public://lndr/' . $lndr_project_id . '/index.html')) {
      // lndr_import_resources($lndr_project_id);
      return drupal_not_found();
    }
    lndr_file_transfer($node, 'index.html');
  }
  else {
    return node_page_view($node);
  }
}

/**
 * Implements hook_cron.
 *
 * @throws \Exception
 */
function lndr_cron() {
  lndr_sync_path();
}

/**
 * Implements hook_cron_queue_info().
 */
function lndr_cron_queue_info() {
  $queues['lndr_source_feed'] = array(
    'worker callback' => 'lndr_source_refresh',
    'time' => 60,
  );
  return $queues;
}

/**
 * Cron queue functional callback.
 */
function lndr_source_refresh($args) {
  list($project, $nid, $force) = $args;
  if ($nid === FALSE) {
    // If We haven't associated node just finish cron job.
    return;
  }
  if (is_numeric($nid) && (($node = node_load($nid)) !== FALSE)) {
    /* @var object $node */
    $node_date = ($node->changed > $node->created ? $node->changed : $node->created);
    $pro_date = new DateTime($project["updated_at"]);
    if ($project["published"] == TRUE && ($pro_date->getTimestamp() - $node_date > 0 || $force)) {
      lndr_import_resources($project['id']);
    }
  }
}

/**
 * If running nginx, implement getallheaders ourself.
 *
 * Code is taken from http://php.net/manual/en/function.getallheaders.php.
 */
if (!function_exists('getallheaders')) {

  /**
   * Fetch all HTTP request headers.
   */
  function getallheaders() {
    foreach ($_SERVER as $name => $value) {
      if (substr($name, 0, 5) == 'HTTP_') {
        $headers[str_replace(' ', '-', ucwords(strtolower(str_replace('_', ' ', substr($name, 5)))))] = $value;
      }
    }
    return $headers;
  }

}

/**
 * @return string|bool
 */
function lndr_client_get_projects() {
  // Get the API token.
  $api_token = variable_get('lndr_token', '');
  if ($api_token === '') {
    return;
  }

  if (variable_get('lndr_debug_mode', 0) === 1) {
    // Testing, using dummy URI as request.
    global $base_url;
    $result = drupal_http_request($base_url . '/examples/lndr/service', array('headers' => array('token' => $api_token)));
  }
  else {
    // Let's reach out to Lndr to get list of contents.
    $options = array(
      'method' => 'GET',
      'headers' => array(
        'Authorization' => 'Token token=' . $api_token,
      ),
    );
    $result = drupal_http_request(LNDR_API_GET_PROJECT, $options);
  }

  // @todo: bad token should be a 403 with message, not 500, implement on Lndr
  if ($result->code !== '200') {
    $message = 'Drupal was unable to create the page with code: %code and error: %error';
    $variables = array(
      '%code' => $result->code,
      '%error' => $result->error,
    );
    watchdog('lndr', $message, $variables, WATCHDOG_WARNING, 'admin/config/content/lndr');
    // @todo: is there another persistent way to add a message to alert admins about this, ideally add a message like there's a security updates.
    return FALSE;
  }
  return json_decode($result->data, TRUE);
}

/**
 * Syncing the url alias from Lndr.
 *
 * @throws \Exception
 */
function lndr_sync_path() {
  module_load_include('inc', 'lndr');
  $data = lndr_get_projects();
  if (!$data || empty($data)) {
    return;
  }
  $data = $data['projects'];
  // Create or update alias in Drupal.
  _lndr_upsert_alias($data);
}

/**
 * Create or update alias in Drupal for Lndr pages.
 *
 * @param $projects
 *
 * @throws \Exception
 */
function _lndr_upsert_alias($projects) {
  global $base_url;
  module_load_include('inc', 'lndr');
  $new_projects = $updated_projects = $existing_projects = $empty_projects_node = $depricated_projects = array();
  foreach ($projects as $project) {
    $new_projects[$project["id"]] = $project;
  }
  if (empty($new_projects)) {
    return;
  }
  $empty_projects_node = array();
  $nodes = _lndr_load_nodes();
  foreach ($nodes as $node) {
    $lndr_project_id = field_get_items('node', $node, 'lndr_project_id');
    if (empty($lndr_project_id)) {
      $empty_projects_node[] = $node->nid;
    }
    else {
      $lndr_id = (reset($lndr_project_id))['value'];
      $project = lndr_find_project_by_prop('id', ($lndr_id));
      if ($project !== FALSE) {
        if (substr($project['publish_url'], 0, strlen($base_url)) === $base_url) {

          $node_date = ($node->changed > $node->created ? $node->changed : $node->created);
          $pro_date = new DateTime($project["updated_at"]);
          if ($pro_date->getTimestamp() - $node_date > 0) {
            $updated_projects[$node->nid] = $project;
          }
          else {
            $existing_projects[$node->nid] = $node;
          }
        }
        else {
          $depricated_projects[] = $node->nid;
        }
        unset($new_projects[$lndr_id]);
      }
      else {
        $depricated_projects[] = $node->nid;
      }
    }
  }

  // A lndr_project_id field is required, so we can delete all node with an empty field.
  node_delete_multiple(array_merge($empty_projects_node, $depricated_projects));

  foreach ($new_projects as $new_project) {
    if ($new_project["published"] == TRUE) {
      $path = ltrim(substr($new_project['publish_url'], strlen($base_url)), '/');
      lndr_reserve_node($path, $new_project['id']);
    }
  }
  foreach ($updated_projects as $nid => $updated_project) {
    $node = node_load($nid);
    $updated_at = new DateTime($project["updated_at"]);
    $node->title = $project["title"];
    $path = ltrim(substr($project['publish_url'], strlen($base_url)), '/');
    $node->path['alias'] = $path;
    $node->changed = $updated_at->getTimestamp();
    node_save($node);
  }
}

/**
 * Check whether a path alias is available.
 *
 * @deprecated
 *   Currently, Lndr allows to continue creating page even a validation was failed.
 */
function lndr_validate_path() {
  module_load_include('inc', 'lndr');

  $response = _lndr_service_base();
  // If token doesn't check out or others, we exit.
  if ($response['response']['type'] === 'error') {
    // @TODO This check should be moved to an access or a service plugin.
    drupal_json_output($response);
    drupal_exit();
  }

  // Query array is stored in response message if everything is fine.
  $query = $response['response']['message'];
  $path = trim($query['path'], '/');
  $existing_path = lndr_check_path_exiting($path);
  if (empty($existing_path)) {
    $response = array(
      'response' => array(
        'type' => 'path_valid',
        'message' => 'The chosen path is available',
        'code' => '200',
      ),
    );
    drupal_json_output($response);
    drupal_exit();
  }
  else {
    $response = array(
      'response' => array(
        'type' => 'path_taken',
        'message' => 'The requested path is not available for Lndr',
        'code' => '403',
      ),
    );
    drupal_json_output($response);
    drupal_exit();
  }
}

/**
 * Reserve an URL alias in Drupal internally.
 *
 * @deprecated
 *    We leave this function for compatibilities with old AI of Lndr.
 */
function lndr_reserve_path() {
  $response = _lndr_service_base();
  // If token doesn't check out or others, we exit.
  if ($response['response']['type'] === 'error') {
    // @TODO This check should be moved to an access or a service plugin.
    drupal_json_output($response);
    drupal_exit();
  }

  // There is no reason to stone an unpublished node,
  // because drupal allows to store a duplicated aliases.
  $response = array(
    'response' => array(
      'type' => 'path_valid',
      'message' => 'The path has been successfully reserved',
      'code' => '200',
    ),
  );
  drupal_json_output($response);
  drupal_exit();
}

/**
 * Helper function that loads all of the nodes that have a lndr project ID.
 */
function _lndr_load_nodes() {
  $nodes = array();

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', LNDR_CT_TYPE);;
  $result = $query->execute();

  if (isset($result['node']) && !empty($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
  }

  return $nodes;
}

/**
 * Sync contents published/deleted from Lndr.
 *
 * @throws \Exception
 */
function lndr_sync_content() {
  $response = _lndr_service_base(FALSE);
  // If token doesn't check out or other issues, we exit.
  if ($response['response']['type'] === 'error') {
    drupal_json_output($response);
    drupal_exit();
  }
  lndr_sync_path();
  $response = array(
    'response' => array(
      'type' => 'content_synced',
      'message' => 'Content successfully synced',
      'code' => '200',
    ),
  );
  drupal_json_output($response);
  drupal_exit();
}

/**
 * Workaround to find Authorization header in additional places for some server
 * setups.
 *
 * @return mixed
 */
function _lndr_getallheaders() {
  // Get all headers.
  $headers = getallheaders();
  // Workaround if somehow the authorization header is not here.
  if (!array_key_exists('Authorization', $headers)) {
    if (array_key_exists('Authorization', $_SERVER)) {
      $headers['Authorization'] = $_SERVER['Authorization'];
    }
    else {
      if (array_key_exists('REDIRECT_HTTP_AUTHORIZATION', $_SERVER)) {
        $headers['Authorization'] = $_SERVER['REDIRECT_HTTP_AUTHORIZATION'];
      }
    }
  }
  return $headers;
}

/**
 * Helper to check incoming token and others for
 * path checking and reservation.
 *
 * @param bool
 *
 * @return array
 */
function _lndr_service_base($check_path = TRUE) {
  // Check if the request has the appropriate API token in the header.
  $headers = _lndr_getallheaders();

  if (!array_key_exists('Authorization', $headers)) {
    // No token exist.
    $response = array(
      'response' => array(
        'type' => 'error',
        'message' => t('No token in the request header'),
        'code' => '403',
      ),
    );
    return $response;
  }
  $api_token = variable_get('lndr_token', '');
  if ($api_token === '') {
    // No token set in Drupal yet.
    $response = array(
      'response' => array(
        'type' => 'error',
        'message' => t('No API token configured in Drupal'),
        'code' => '403',
      ),
    );
    return $response;
  }

  $authorization = str_replace('Token token=', '', $headers['Authorization']);
  if ($api_token !== $authorization) {
    // Invalid token given.
    $response = array(
      'response' => array(
        'type' => 'error',
        'message' => t('Invalid token given'),
        'code' => '403',
      ),
    );
    return $response;
  }

  $query = drupal_get_query_parameters();
  if ($check_path === TRUE) {
    if (!array_key_exists('path', $query)) {
      $response = array(
        'response' => array(
          'type' => 'error',
          'message' => t('Required parameter path not given'),
          'code' => '403',
        ),
      );
      return $response;
    }
  }

  // If everything checks out, we just pass the query back.
  $response = array(
    'response' => array(
      'type' => 'status',
      'message' => $query,
      'code' => '200',
    ),
  );
  return $response;
}

/**
 * Parsing resources.
 *
 * @return array
 */
function lndr_import_resources($project_id) {
  $project = lndr_find_project_by_prop('id', $project_id);
  $directory = lndr_get_public_by_project($project);
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

  $result = drupal_http_request($url = $project['origin_url']);
  // Start to parse the content.
  module_load_include('inc', 'lndr', 'includes/simple_html_dom');
  $html = str_get_html($result->data);

  // Saving assets.
  $selectors = implode(', ', array(
    '[data-background-image]',
    'img',
    'link[rel="stylesheet"]',
    'script',
  ));
  foreach ($html->find($selectors) as $key => $element) {
    /* @var \simple_html_dom_node $element */
    foreach (array('src', 'href', 'data-background-image') as $source_attr) {
      if (!$element->hasAttribute($source_attr)) {
        continue;
      }
      $file_path_info = parse_url($element->{$source_attr});
      if (isset($file_path_info['host'])) {
        // @TODO If url is absolute we skips following steps assuming that url is cdn or external etc.
        continue;
      }

      // There might be some inline script we don't care for.
      if (isset($file_path_info['path']) && !empty($file_path_info['path'])) {
        // If url is empty, just prepare path.
        $resource_file = lndr_save_unmanaged_files($file_path_info['path'], $directory, $url);
        $element->setAttribute($source_attr, file_create_url($resource_file));
      }
    }
  }
  $file_saved = file_unmanaged_save_data((string) $html, $directory . '/index.html', FILE_EXISTS_REPLACE);
  if (!$file_saved) {
    $message = 'Unable to save index file from ' . $url;
    $variables = array(
      '%url' => $url,
    );
    watchdog('lndr', $message, $variables, WATCHDOG_WARNING, 'node');
  }

}

/**
 * @TODO This shoud be simplified.
 */
function lndr_save_unmanaged_files($path, $directory, $url = NULL) {
  $resource_dir = implode('/', array($directory, trim(dirname($path), '\/')));
  $resource_file = implode('/', array($directory, trim($path, '\/')));
  file_prepare_directory($resource_dir, FILE_CREATE_DIRECTORY);
  if (!is_null($url)) {
    $resource_data = file_get_contents($url . '/' . trim($path, '\/'));
    if ($resource_data !== FALSE) {
      file_unmanaged_save_data($resource_data, $resource_file, FILE_EXISTS_REPLACE);
    }
  }
  return $resource_file;
}

/**
 * Implements hook_node_insert().
 *
 * @param object $node
 */
function lndr_node_insert($node) {
  module_load_include('inc', 'lndr');

  $lndr_project_id = field_get_items('node', $node, 'lndr_project_id');
  if (empty($lndr_project_id)) {
    return;
  }

  $project = lndr_find_project_by_prop('id', (reset($lndr_project_id))['value']);
  if (!$project) {
    return;
  }

  // Queue will be ran via cron and update all project files.
  // @see lndr_import_resources().
  $queue = DrupalQueue::get('lndr_source_feed');
  $node = lndr_load($project["id"]);
  $queue->createItem(array($project, $node->nid, TRUE));
}

/**
 * Implements hook_node_update().
 *
 * @param object $node
 */
function lndr_node_update($node) {
  lndr_node_insert($node);
}

/**
 * Implements hook_node_delete().
 *
 * @param object $node
 */
function lndr_node_delete($node) {
  $lndr_project_id = field_get_items('node', $node, 'lndr_project_id');
  if (empty($lndr_project_id)) {
    return;
  }
  file_unmanaged_delete_recursive('public://lndr/' . (reset($lndr_project_id))['value']);
}
